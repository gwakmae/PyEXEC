[
    {
        "project_name": "ProgramManager",
        "xaml_matches": [],
        "ui_files": [],
        "code_analysis": [
            {
                "file": "C:/Users/Public/Documents/C#_Code/ProgramManager\\ProgramManager\\App.xaml.cs",
                "full_code": "﻿using System.Windows;\n\nnamespace ProgramManager\n{\n    public partial class App : Application\n    {\n    }\n}\n",
                "classes": [
                    "App"
                ],
                "methods": []
            },
            {
                "file": "C:/Users/Public/Documents/C#_Code/ProgramManager\\ProgramManager\\AssemblyInfo.cs",
                "full_code": "using System.Windows;\n\n[assembly: ThemeInfo(\n    ResourceDictionaryLocation.None,\n    ResourceDictionaryLocation.SourceAssembly\n)]\n",
                "classes": [],
                "methods": []
            },
            {
                "file": "C:/Users/Public/Documents/C#_Code/ProgramManager\\ProgramManager\\MainWindow.xaml.cs",
                "full_code": "﻿using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;  // ObservableCollection<> 사용을 위해 필요\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Input;\nusing System.IO;\nusing System.Text.Json;\nusing System.Diagnostics;\nusing Microsoft.Win32;\nusing System.Linq;  // FirstOrDefault() 사용을 위해 필요\nusing ProgramManager.Models;  // Program 클래스 사용을 위해 필요\nusing System.Threading.Tasks;  // Task 사용을 위해 추가\n\nnamespace ProgramManager\n{\n    public partial class MainWindow : Window\n    {\n        private const string PROGRAM_LIST_FILE = \"program_list.json\";\n        private ObservableCollection<Program> Programs { get; set; }\n\n        public MainWindow()\n        {\n            InitializeComponent();\n            Programs = new ObservableCollection<Program>();\n            ProgramGrid.ItemsSource = Programs;\n            LoadProgramList();\n\n            this.KeyDown += (s, e) =>\n            {\n                if (e.Key == Key.F5)\n                    RunSelectedProgram();\n            };\n        }\n\n        private void LoadProgramList()\n        {\n            if (File.Exists(PROGRAM_LIST_FILE))\n            {\n                try\n                {\n                    var json = File.ReadAllText(PROGRAM_LIST_FILE);\n                    var programs = JsonSerializer.Deserialize<List<Program>>(json);\n                    Programs.Clear();\n                    foreach (var program in programs)\n                        Programs.Add(program);\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show($\"Error loading program list: {ex.Message}\",\n                        \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n                }\n            }\n        }\n\n        private void SaveProgramList()\n        {\n            try\n            {\n                var json = JsonSerializer.Serialize(Programs.ToList(),\n                    new JsonSerializerOptions { WriteIndented = true });\n                File.WriteAllText(PROGRAM_LIST_FILE, json);\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Error saving program list: {ex.Message}\",\n                    \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n            }\n        }\n\n        private void AddProgram_Click(object sender, RoutedEventArgs e)\n        {\n            var dialog = new OpenFileDialog\n            {\n                Filter = \"Python Files (*.py)|*.py|All Files (*.*)|*.*\",\n                Multiselect = true\n            };\n\n            if (dialog.ShowDialog() == true)\n            {\n                foreach (var path in dialog.FileNames)\n                {\n                    if (Programs.Any(p => p.Path == path))\n                    {\n                        MessageBox.Show($\"Program already exists: {path}\",\n                            \"Warning\", MessageBoxButton.OK, MessageBoxImage.Warning);\n                        continue;\n                    }\n\n                    var program = new Program\n                    {\n                        Name = Path.GetFileNameWithoutExtension(path),\n                        Description = \"Description needed\",\n                        Path = path,\n                        Category = \"Miscellaneous\"\n                    };\n\n                    Programs.Add(program);\n                }\n                SaveProgramList();\n            }\n        }\n\n        private void MoveUp_Click(object sender, RoutedEventArgs e)\n        {\n            var selectedProgram = ProgramGrid.SelectedItem as Program;\n            if (selectedProgram == null) return;\n\n            var index = Programs.IndexOf(selectedProgram);\n            if (index > 0)\n            {\n                Programs.Move(index, index - 1);\n                ProgramGrid.SelectedIndex = index - 1;\n                SaveProgramList();\n            }\n        }\n\n        private void RunProgram_Click(object sender, RoutedEventArgs e)\n        {\n            var selectedProgram = ProgramGrid.SelectedItem as Program;\n            if (selectedProgram != null)\n            {\n                RunProgram(selectedProgram);\n            }\n        }\n                \n        private void ProgramGrid_DoubleClick(object sender, MouseButtonEventArgs e)\n        {\n            if (ProgramGrid.SelectedItem is Models.Program selectedProgram)\n            {\n                RunProgram(selectedProgram);\n            }\n        }\n\n\n        private void RemoveProgram_Click(object sender, RoutedEventArgs e)\n        {\n            var selected = ProgramGrid.SelectedItem as Program;\n            if (selected == null)\n            {\n                MessageBox.Show(\"Please select a program to remove.\",\n                    \"Warning\", MessageBoxButton.OK, MessageBoxImage.Warning);\n                return;\n            }\n\n            if (MessageBox.Show(\"Are you sure you want to remove this program?\",\n                \"Confirm\", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)\n            {\n                Programs.Remove(selected);\n                SaveProgramList();\n            }\n        }\n\n        private void SaveTemplate_Click(object sender, RoutedEventArgs e)\n        {\n            var dialog = new SaveFileDialog\n            {\n                Filter = \"Template Files (*.tpl)|*.tpl|All Files (*.*)|*.*\",\n                DefaultExt = \".tpl\"\n            };\n\n            if (dialog.ShowDialog() == true)\n            {\n                try\n                {\n                    var json = JsonSerializer.Serialize(Programs.ToList(),\n                        new JsonSerializerOptions { WriteIndented = true });\n                    File.WriteAllText(dialog.FileName, json);\n                    MessageBox.Show(\"Template saved successfully!\",\n                        \"Success\", MessageBoxButton.OK, MessageBoxImage.Information);\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show($\"Error saving template: {ex.Message}\",\n                        \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n                }\n            }\n        }\n\n        private void LoadTemplate_Click(object sender, RoutedEventArgs e)\n        {\n            var dialog = new OpenFileDialog\n            {\n                Filter = \"Template Files (*.tpl)|*.tpl|All Files (*.*)|*.*\"\n            };\n\n            if (dialog.ShowDialog() == true)\n            {\n                try\n                {\n                    var json = File.ReadAllText(dialog.FileName);\n                    var programs = JsonSerializer.Deserialize<List<Program>>(json);\n                    Programs.Clear();\n                    foreach (var program in programs)\n                        Programs.Add(program);\n                    SaveProgramList();\n                    MessageBox.Show(\"Template loaded successfully!\",\n                        \"Success\", MessageBoxButton.OK, MessageBoxImage.Information);\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show($\"Error loading template: {ex.Message}\",\n                        \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n                }\n            }\n        }\n\n        private void ProgramGrid_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)\n        {\n            UpdateCodeViewer();\n        }\n\n        private void UpdateCodeViewer()\n        {\n            var selected = ProgramGrid.SelectedItem as Program;\n            if (selected == null)\n            {\n                CodeViewer.Text = \"No program selected.\";\n                return;\n            }\n\n            try\n            {\n                if (File.Exists(selected.Path))\n                    CodeViewer.Text = File.ReadAllText(selected.Path);\n                else\n                    CodeViewer.Text = \"File not found.\";\n            }\n            catch (Exception ex)\n            {\n                CodeViewer.Text = $\"Error loading file: {ex.Message}\";\n            }\n        }\n\n        private void RunSelectedProgram()\n        {\n            var selectedProgram = ProgramGrid.SelectedItem as Program;\n            if (selectedProgram != null)\n            {\n                RunProgram(selectedProgram);\n            }\n        }\n\n\n        private void RunProgram(Program program)\n        {\n            try\n            {\n                // 원본 파이썬 코드를 읽어옴\n                string originalCode = File.ReadAllText(program.Path);\n\n                // 임시 파일 경로\n                string tempPath = Path.Combine(\n                    Path.GetDirectoryName(program.Path),\n                    Path.GetFileNameWithoutExtension(program.Path) + \"_temp.py\"\n                );\n\n                // 원본 코드에 input() 추가하여 임시 파일 생성\n                File.WriteAllText(tempPath, originalCode + \"\\n\\ninput('Press Enter to exit...')\");\n\n                ProcessStartInfo startInfo = new ProcessStartInfo();\n                startInfo.FileName = \"python\";\n                startInfo.Arguments = $\"\\\"{tempPath}\\\"\";\n                startInfo.UseShellExecute = true;\n\n                Process.Start(startInfo);\n\n                // 약간의 딜레이 후 임시 파일 삭제\n                Task.Delay(1000).ContinueWith(t =>\n                {\n                    try\n                    {\n                        if (File.Exists(tempPath))\n                            File.Delete(tempPath);\n                    }\n                    catch { }\n                });\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Error running program: {ex.Message}\",\n                    \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n            }\n        }\n\n        private void MoveDown_Click(object sender, RoutedEventArgs e)\n        {\n            var selected = ProgramGrid.SelectedItem as Program;\n            if (selected == null) return;\n\n            int index = Programs.IndexOf(selected);\n            if (index < Programs.Count - 1)\n            {\n                Programs.Move(index, index + 1);\n                SaveProgramList();\n            }\n        }\n\n        private void InstallPython_Click(object sender, RoutedEventArgs e)\n        {\n            Process.Start(new ProcessStartInfo\n            {\n                FileName = \"https://www.python.org/downloads/\",\n                UseShellExecute = true\n            });\n        }\n\n        private void AddPythonToPath_Click(object sender, RoutedEventArgs e)\n        {\n            // This is a simplified version. You might want to implement more robust PATH management\n            try\n            {\n                var pythonPath = GetPythonInstallPath();\n                if (string.IsNullOrEmpty(pythonPath))\n                {\n                    MessageBox.Show(\"Python installation not found.\",\n                        \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n                    return;\n                }\n\n                var path = Environment.GetEnvironmentVariable(\"PATH\", EnvironmentVariableTarget.User);\n                if (!path.Contains(pythonPath))\n                {\n                    Environment.SetEnvironmentVariable(\"PATH\",\n                        path + \";\" + pythonPath,\n                        EnvironmentVariableTarget.User);\n                    MessageBox.Show(\"Python added to PATH successfully!\",\n                        \"Success\", MessageBoxButton.OK, MessageBoxImage.Information);\n                }\n                else\n                {\n                    MessageBox.Show(\"Python is already in PATH.\",\n                        \"Information\", MessageBoxButton.OK, MessageBoxImage.Information);\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Error adding Python to PATH: {ex.Message}\",\n                    \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n            }\n        }\n\n        private string GetPythonInstallPath()\n        {\n            // This is a simplified version. You might want to implement more robust Python detection\n            var pythonPath = Environment.GetEnvironmentVariable(\"PYTHONHOME\");\n            if (!string.IsNullOrEmpty(pythonPath))\n                return pythonPath;\n\n            // Try to find Python in common installation locations\n            string[] commonPaths = {\n                @\"C:\\Python39\",\n                @\"C:\\Python38\",\n                @\"C:\\Python37\",\n                @\"C:\\Program Files\\Python39\",\n                @\"C:\\Program Files\\Python38\",\n                @\"C:\\Program Files\\Python37\"\n            };\n\n            return commonPaths.FirstOrDefault(path => Directory.Exists(path));\n        }\n\n        private void Exit_Click(object sender, RoutedEventArgs e)\n        {\n            Close();\n        }\n\n        private void About_Click(object sender, RoutedEventArgs e)\n        {\n            MessageBox.Show(\n                \"Python Program Manager\\nVersion 1.0\\n\\nA tool for managing and running Python programs.\",\n                \"About\",\n                MessageBoxButton.OK,\n                MessageBoxImage.Information\n            );\n        }\n    }\n}\n",
                "classes": [
                    "MainWindow"
                ],
                "methods": [
                    "private void LoadProgramList()",
                    "private void SaveProgramList()",
                    "private void AddProgram_Click(object sender, RoutedEventArgs e)",
                    "private void MoveUp_Click(object sender, RoutedEventArgs e)",
                    "private void RunProgram_Click(object sender, RoutedEventArgs e)",
                    "private void ProgramGrid_DoubleClick(object sender, MouseButtonEventArgs e)",
                    "private void RemoveProgram_Click(object sender, RoutedEventArgs e)",
                    "private void SaveTemplate_Click(object sender, RoutedEventArgs e)",
                    "private void LoadTemplate_Click(object sender, RoutedEventArgs e)",
                    "private void ProgramGrid_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)",
                    "private void UpdateCodeViewer()",
                    "private void RunSelectedProgram()",
                    "private void RunProgram(Program program)",
                    "private void MoveDown_Click(object sender, RoutedEventArgs e)",
                    "private void InstallPython_Click(object sender, RoutedEventArgs e)",
                    "private void AddPythonToPath_Click(object sender, RoutedEventArgs e)",
                    "private string GetPythonInstallPath()",
                    "private void Exit_Click(object sender, RoutedEventArgs e)",
                    "private void About_Click(object sender, RoutedEventArgs e)"
                ]
            },
            {
                "file": "C:/Users/Public/Documents/C#_Code/ProgramManager\\ProgramManager\\Models\\Program.cs",
                "full_code": "﻿using System;\n\nnamespace ProgramManager.Models\n{\n    public class Program\n    {\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string Path { get; set; }\n        public string Category { get; set; }\n    }\n}\n",
                "classes": [
                    "Program"
                ],
                "methods": []
            }
        ]
    }
]